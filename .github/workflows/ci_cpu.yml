name: CI CPU

on:
  push:
    paths-ignore:
      - 'docs/**'
  pull_request:

env:
  GPT_OSS_API: http://127.0.0.1:8009
  GPT_OSS_TIMEOUT: 5
  TEST_MODE: "1"

jobs:
  lint-type-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Cache pip wheels
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-ci.txt', 'requirements-cpu.txt') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-ci.txt
          pip install -r requirements-cpu.txt
      - name: Start mock server
        run: |
          python - <<'PY' &
          from http.server import BaseHTTPRequestHandler, HTTPServer
          import json
          class Handler(BaseHTTPRequestHandler):
              def do_POST(self):
                  if self.path == '/v1/completions':
                      length = int(self.headers.get('Content-Length', 0))
                      self.rfile.read(length)
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({'choices': [{'text': 'ok'}]}).encode())
                  else:
                      self.send_response(404)
                      self.end_headers()
          HTTPServer(('127.0.0.1', 8009), Handler).serve_forever()
          PY
          echo $! > server.pid
          sleep 1
      - name: Run flake8
        run: flake8 .
      - name: Run mypy
        run: mypy .
      - name: Run pytest
        run: pytest
      - name: Stop mock server
        if: always()
        run: |
          pkill -F server.pid || true
          rm server.pid

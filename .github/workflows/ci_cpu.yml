name: CI CPU

permissions:
  contents: read
  actions: write

concurrency:
  group: ci-cpu-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    paths-ignore:
      - 'docs/**'
  pull_request:
  workflow_dispatch:

env:
  DOCKERFILE: Dockerfile.cpu
  GPT_OSS_API: http://127.0.0.1:8009
  GPT_OSS_TIMEOUT: 5
  TEST_MODE: "1"
  CSRF_SECRET: testsecret
  PYTHONPYCACHEPREFIX: /mnt/pycache
  COMPOSE_PROJECT_NAME: ci

jobs:
  lint-type-test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: ['3.10', '3.11']
        device: [cpu]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: ./.github/actions/setup-env
        with:
          python-version: ${{ matrix.python-version }}
          device: ${{ matrix.device }}
      - name: Start mock server
        run: |
          trap 'if [ -f server.pid ]; then kill $(cat server.pid) || true; fi' EXIT
          python - <<'PY' &
          from http.server import BaseHTTPRequestHandler, HTTPServer
          import json
          class Handler(BaseHTTPRequestHandler):
              def do_POST(self):
                  if self.path == '/v1/completions':
                      length = int(self.headers.get('Content-Length', 0))
                      self.rfile.read(length)
                      self.send_response(200)
                      self.send_header('Content-Type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({'choices': [{'text': 'ok'}]}).encode())
                  else:
                      self.send_response(404)
                      self.end_headers()
          HTTPServer(('127.0.0.1', 8009), Handler).serve_forever()
          PY
          echo $! > server.pid
          timeout 30 bash <<'BASH'
          until curl --max-time 5 -sf \
            -X POST -H "Content-Type: application/json" -d '{}' \
            "$GPT_OSS_API/v1/completions" >/dev/null; do
            sleep 0.5
          done
          BASH
      - name: Run flake8
        run: |
          set -o pipefail
          python -m flake8 --exclude venv . | tee flake8.log || code=$?
          exit $code
      - name: Upload flake8 log
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: flake8-log-${{ matrix.python-version }}-${{ matrix.device }}
          path: flake8.log
          if-no-files-found: ignore
      - name: Run mypy
        run: python -m mypy --exclude venv .
      - name: Remove test caches
        if: always()
        uses: ./.github/actions/clear-test-caches
      - name: Run pytest
        run: |
          set -o pipefail
          timeout 25m pytest -ra -m "not integration" | tee pytest.log || code=$?
          exit $code
      - name: Upload pytest log
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pytest-log-${{ matrix.python-version }}-${{ matrix.device }}
          path: pytest.log
          if-no-files-found: ignore
      - name: Stop mock server
        if: always()
        run: |
          if [ -f server.pid ]; then
            pid=$(cat server.pid)
            kill "$pid" || true
            while kill -0 "$pid" 2>/dev/null; do sleep 0.5; done
            rm server.pid
            test ! -f server.pid
          fi
      - name: Restore Docker BuildKit cache
        uses: actions/cache@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          path: /mnt/buildkit-cache
          key: ${{ runner.os }}-buildkit-ci-${{ hashFiles('Dockerfile', 'Dockerfile.cpu', 'Dockerfile.gptoss', 'docker/patches/**', 'docker/scripts/**', 'requirements-core.txt', 'requirements-gpu.txt') }}
          restore-keys: |
            ${{ runner.os }}-buildkit-ci-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          driver: docker-container
          driver-opts: image=moby/buildkit:v0.25.0
      - name: Build CPU images with cache
        env:
          CACHE_DIR: /mnt/buildkit-cache
          DOCKERFILE: ${{ env.DOCKERFILE }}
          PROJECT_NAME: ${{ env.COMPOSE_PROJECT_NAME }}
        run: |
          set -euxo pipefail
          mkdir -p "${CACHE_DIR}"
          docker buildx build \
            --file "${DOCKERFILE}" \
            --cache-from "type=local,src=${CACHE_DIR}" \
            --cache-to "type=local,dest=${CACHE_DIR},mode=max" \
            --load \
            --tag "${PROJECT_NAME}-data_handler" \
            --tag "${PROJECT_NAME}_data_handler" \
            --tag "${PROJECT_NAME}-model_builder" \
            --tag "${PROJECT_NAME}_model_builder" \
            --tag "${PROJECT_NAME}-trade_manager" \
            --tag "${PROJECT_NAME}_trade_manager" \
            --tag "${PROJECT_NAME}-bot" \
            --tag "${PROJECT_NAME}_bot" \
            .
      - name: Build GPT-OSS image with cache
        env:
          CACHE_DIR: /mnt/buildkit-cache
          PROJECT_NAME: ${{ env.COMPOSE_PROJECT_NAME }}
        run: |
          set -euxo pipefail
          mkdir -p "${CACHE_DIR}"
          docker buildx build \
            --file Dockerfile.gptoss \
            --cache-from "type=local,src=${CACHE_DIR}" \
            --cache-to "type=local,dest=${CACHE_DIR},mode=max" \
            --load \
            --tag "${PROJECT_NAME}-gptoss" \
            --tag "${PROJECT_NAME}_gptoss" \
            .
      - name: Run docker compose
        run: |
          docker compose -f docker-compose.yml \
            -f docker-compose.cpu.yml \
            up --no-build --abort-on-container-exit \
            --exit-code-from gptoss_check
          docker compose -f docker-compose.yml -f docker-compose.cpu.yml down
      - name: Cleanup buildx
        if: always()
        run: docker buildx prune -af || true

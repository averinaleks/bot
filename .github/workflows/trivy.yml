---
name: trivy

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "21 10 * * 2"

permissions:
  contents: read
  security-events: write
  actions: write  # required for uploading artifacts such as SARIF reports

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        # v4
        with:
          persist-credentials: false

      - name: Prepare Trivy cache directory
        run: |
          mkdir -p "$TRIVY_CACHE_DIR"
        env:
          TRIVY_CACHE_DIR: ${{ runner.temp }}/trivy-cache

      - name: Restore Trivy vulnerability database
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        # v4.2.4
        with:
          path: ${{ runner.temp }}/trivy-cache
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('requirements*.txt', 'Dockerfile*') }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      - id: trivy
        name: Run Trivy scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        # 0.33.1
        continue-on-error: true
        env:
          TRIVY_CACHE_DIR: ${{ runner.temp }}/trivy-cache
        with:
          scan-type: fs
          scanners: vuln
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          # Fail workflow when vulnerabilities of specified severity are found
          exit-code: 1

      - name: Ensure jq is available
        if: ${{ steps.trivy.conclusion != 'skipped' && always() }}
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Parse Trivy results
        id: parse_trivy
        if: ${{ steps.trivy.conclusion != 'skipped' && always() }}
        run: |
          set -euo pipefail
          if [ ! -f trivy-results.sarif ]; then
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
            echo "vulnerability_count=0" >> "$GITHUB_OUTPUT"
            echo "parsing_failed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if ! count=$(jq '[.runs[]?.results[]?] | length' trivy-results.sarif); then
            echo "::error::Failed to parse trivy-results.sarif with jq." >&2
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
            echo "vulnerability_count=0" >> "$GITHUB_OUTPUT"
            echo "parsing_failed=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          echo "vulnerability_count=${count}" >> "$GITHUB_OUTPUT"
          echo "parsing_failed=false" >> "$GITHUB_OUTPUT"

      - name: Summarize Trivy scan
        if: ${{ steps.trivy.conclusion != 'skipped' && always() }}
        run: |
          if [ "${{ steps.parse_trivy.outputs.sarif_exists }}" != 'true' ]; then
            printf '### Trivy scan summary\n\n* No SARIF report was generated.\n' >> "$GITHUB_STEP_SUMMARY"
          else
            count="${{ steps.parse_trivy.outputs.vulnerability_count }}"
            printf '### Trivy scan summary\n\n* High/Critical findings: `%s`\n' "$count" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ steps.parse_trivy.outputs.sarif_exists == 'true' && github.event_name != 'pull_request' && always() }}
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3
        # v3.30.3
        with:
          sarif_file: trivy-results.sarif

      - name: Upload Trivy report artifact
        if: ${{ steps.parse_trivy.outputs.sarif_exists == 'true' && always() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        # v4
        with:
          name: trivy-results
          path: trivy-results.sarif

      - name: Fail if Trivy scan failed unexpectedly
        if: ${{ steps.trivy.conclusion == 'failure' && steps.parse_trivy.outputs.sarif_exists != 'true' }}
        run: |
          echo "::error::Trivy scan failed before producing a SARIF report."
          exit 1

      - name: Fail if Trivy results parsing failed
        if: ${{ steps.parse_trivy.outputs.parsing_failed == 'true' }}
        run: |
          echo "::error::Unable to parse Trivy SARIF output."
          exit 1

      - name: Fail if vulnerabilities found
        if: ${{ steps.parse_trivy.outputs.sarif_exists == 'true' && steps.parse_trivy.outputs.vulnerability_count != '0' }}
        run: |
          echo "::error::Trivy detected ${{ steps.parse_trivy.outputs.vulnerability_count }} high or critical vulnerabilities."
          exit 1

# .github/workflows/gptoss_review.yml
# yamllint disable rule:line-length rule:truthy
---
name: GPT-OSS Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]
  push:
    branches:
      - main
    paths:
      - '.github/workflows/gptoss_review.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{
    format(
      'gptoss-review-{0}-{1}',
      github.workflow,
      github.event_name == 'pull_request_target'
        ? github.event.pull_request.number
        : github.event_name == 'issue_comment'
          ? github.event.issue.number
          : github.run_id
    )
  }}
  cancel-in-progress: true

jobs:
  evaluate:
    runs-on: ubuntu-latest
    outputs:
      run_review: ${{ steps.decision.outputs.run_review }}
      pr_number: ${{ steps.decision.outputs.pr_number }}
      skip_reason: ${{ steps.decision.outputs.skip_reason }}
    steps:
      - name: Determine execution mode
        id: decision
        env:
          EVENT_NAME: ${{ github.event_name }}
          REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number || '' }}
          PR_DRAFT: ${{ github.event.pull_request.draft || 'false' }}
          PR_HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name || '' }}
          ISSUE_NUMBER: ${{ github.event.issue.number || '' }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login || '' }}
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
        run: |
          set -euo pipefail

          run_review=false
          pr_number=""
          skip_reason=""

          case "$EVENT_NAME" in
            pull_request_target)
              pr_number="${PR_NUMBER:-}"
              pr_draft="${PR_DRAFT:-false}"
              pr_head_repo="${PR_HEAD_REPO:-}"
              if [ -z "$pr_number" ]; then
                skip_reason="PR не найден"
              elif [ "$pr_draft" = "true" ]; then
                skip_reason="PR находится в состоянии draft"
              elif [ -n "$pr_head_repo" ] && [ "$pr_head_repo" != "$REPOSITORY" ]; then
                skip_reason="PR создан из внешнего репозитория"
              else
                run_review=true
              fi
              ;;
            issue_comment)
              pr_number="${ISSUE_NUMBER:-}"
              comment_author="${COMMENT_AUTHOR:-}"
              comment_body="${COMMENT_BODY:-}"
              if [ -z "$pr_number" ]; then
                skip_reason="Комментарий не относится к pull request"
              elif [ "$comment_author" = "github-actions[bot]" ]; then
                skip_reason="Комментарий создан GitHub Actions – обзор не требуется"
              elif [[ "$comment_body" != *"/llm-review"* ]]; then
                skip_reason="Комментарий не содержит /llm-review"
              else
                run_review=true
              fi
              ;;
            *)
              skip_reason="Workflow triggered for $EVENT_NAME – no review required."
              ;;
          esac

          if [ "$run_review" = true ]; then
            skip_reason=""
          elif [ -z "$skip_reason" ]; then
            skip_reason="Workflow triggered for $EVENT_NAME – no review required."
          fi

          {
            echo "run_review=$run_review"
            echo "pr_number=$pr_number"
            echo "skip_reason=$skip_reason"
          } >>"$GITHUB_OUTPUT"

  skip:
    needs: evaluate
    if: ${{ needs.evaluate.outputs.run_review != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Skip unsupported event
        run: |
          message="${{ needs.evaluate.outputs.skip_reason }}"
          if [ -z "$message" ]; then
            message="Workflow triggered for ${{ github.event_name }} – no review required."
          fi
          echo "$message"

  review:
    needs: evaluate
    if: ${{ needs.evaluate.outputs.run_review == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    env:
      PR_NUMBER: ${{ needs.evaluate.outputs.pr_number }}
      MODEL_NAME: ${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-0.5B-Instruct' }}

    steps:
      - name: Проверка события
        id: validate_event
        run: |
          set -euo pipefail
          pr_number="${PR_NUMBER:-}"
          if [ -z "$pr_number" ]; then
            echo "::notice::Рабочий процесс запущен не для PR – пропускаю выполнение обзора."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: Проверка статуса PR
        if: ${{ steps.validate_event.outputs.skip != 'true' }}
        id: ensure_pr_ready
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail

          pr_number="${PR_NUMBER:-}"
          if [ -z "$pr_number" ]; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          api_url="https://api.github.com/repos/${REPOSITORY}/pulls/${pr_number}"
          if ! response=$(curl -fsSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            "$api_url"); then
            echo "::warning::Не удалось получить данные PR ${pr_number} – пропускаю обзор" >&2
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          printf '%s\n' "$response" | python3 - <<'PY'
import json
import os
import sys

output_path = os.getenv("GITHUB_OUTPUT")
repository = os.getenv("REPOSITORY", "")

skip = False
notices: list[str] = []

try:
    data = json.load(sys.stdin)
except json.JSONDecodeError:
    skip = True
    notices.append("Ответ GitHub API не является корректным JSON")
else:
    state = data.get("state")
    head = data.get("head") or {}
    head_repo = (head.get("repo") or {}).get("full_name")

    if state != "open":
        skip = True
        notices.append(f"PR находится в состоянии {state!r}")

    if head_repo is None:
        skip = True
        notices.append("head-репозиторий недоступен (ветка могла быть удалена)")
    elif head_repo and repository and head_repo != repository:
        skip = True
        notices.append(
            f"PR создан из репозитория {head_repo}, ожидается {repository}"
        )

if skip:
    if notices:
        print("::notice::" + "; ".join(notices) + ". Пропускаю запуск обзора.")
    else:
        print("::notice::PR не подходит для обзора. Пропускаю запуск обзора.")
else:
    print("::debug::PR прошёл проверку статуса и источника.")

if output_path:
    try:
        with open(output_path, "a", encoding="utf-8") as fh:
            fh.write(f"skip={'true' if skip else 'false'}\n")
    except OSError as exc:
        print(f"::warning::Не удалось записать GITHUB_OUTPUT: {exc}", file=sys.stderr)
PY

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        if: ${{ steps.validate_event.outputs.skip != 'true' && steps.ensure_pr_ready.outputs.skip != 'true' }}
        with:
          fetch-depth: 0
          ref: refs/pull/${{ env.PR_NUMBER }}/head

      - name: Start mock GPT-OSS server
        if: ${{ steps.validate_event.outputs.skip != 'true' && steps.ensure_pr_ready.outputs.skip != 'true' }}
        id: start_llm
        run: |
          set -euo pipefail

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            started_output="false"
            cleanup_output() {
              printf 'started=%s\n' "$started_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          if [ ! -f scripts/gptoss_mock_server.py ]; then
            echo "::notice::Скрипт scripts/gptoss_mock_server.py не найден, пропускаю запуск mock-сервера"
            exit 0
          fi

          # Ask the OS to pick a free TCP port and persist it to ``mock_server.port``.
          # Earlier revisions tried to preselect a port in bash, but the gap between
          # reserving the number and binding to it occasionally allowed another
          # process to claim the same port which crashed the mock server.  Delegating
          # the selection to the Python helper keeps the operation atomic and
          # removes the race entirely.
          python3 scripts/gptoss_mock_server.py \
            --host 127.0.0.1 \
            --port 0 \
            --port-file mock_server.port \
            >mock_server.log 2>&1 &
          echo $! > mock_server.pid

          # Make sure the background process actually started before waiting
          # for the ``mock_server.port`` file.  ``kill -0`` returns success when
          # the PID is alive and avoids failing the step because of "set -e".
          if ! kill -0 "$(cat mock_server.pid)" 2>/dev/null; then
            echo "::warning::Mock GPT-OSS server exited immediately" >&2
            if [ -s mock_server.log ]; then
              sed 's/^/mock-server: /' mock_server.log >&2 || true
            fi
            rm -f mock_server.pid mock_server.port mock_server.log
            exit 0
          fi

          ready=0
          for _ in {1..50}; do
            if [ -s mock_server.port ]; then
              port=$(cat mock_server.port)
              if [[ "$port" =~ ^[0-9]+$ ]]; then
                if [ -n "${GITHUB_ENV:-}" ]; then
                  echo "LLM_PORT=$port" >> "$GITHUB_ENV"
                  ready=1
                else
                  echo "::warning::Переменная GITHUB_ENV не задана – не удалось экспортировать порт LLM" >&2
                fi
                break
              fi
            fi
            sleep 0.2
          done

          if [ "$ready" -ne 1 ]; then
            echo "::warning::Mock GPT-OSS server did not report a port – пропускаю генерацию обзора" >&2
            if [ -f mock_server.pid ]; then
              kill "$(cat mock_server.pid)" || true
              rm -f mock_server.pid
            fi
            if [ -s mock_server.log ]; then
              sed 's/^/mock-server: /' mock_server.log >&2 || true
            fi
            rm -f mock_server.port mock_server.log || true
            exit 0
          fi

          started_output="true"
        env:
          MODEL_NAME: ${{ env.MODEL_NAME }}

      - name: Wait for GPT-OSS server
        if: ${{
          steps.validate_event.outputs.skip != 'true'
          && steps.ensure_pr_ready.outputs.skip != 'true'
          && steps.start_llm.outputs.started == 'true'
        }}
        id: wait_llm
        run: |
          set -euo pipefail

          if [ -z "${LLM_PORT:-}" ]; then
            echo "::warning::Переменная LLM_PORT не задана – пропускаю ожидание сервера" >&2
            exit 0
          fi

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            ready_output="false"
            cleanup_output() {
              printf 'ready=%s\n' "$ready_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          ready=0
          for _ in {1..60}; do
            if curl -sSf "http://127.0.0.1:${LLM_PORT}/v1/models" >/dev/null; then
              ready=1
              break
            fi
            sleep 1
          done

          if [ "$ready" -ne 1 ]; then
            echo "::warning::LLM server failed to start" >&2
            if [ -f mock_server.pid ]; then
              kill "$(cat mock_server.pid)" || true
              rm -f mock_server.pid
            fi
            rm -f mock_server.port mock_server.log || true
            exit 0
          fi

          ready_output="true"

      - name: Generate diff
        if: ${{
          steps.validate_event.outputs.skip != 'true'
          && steps.ensure_pr_ready.outputs.skip != 'true'
          && steps.start_llm.outputs.started == 'true'
          && steps.wait_llm.outputs.ready == 'true'
        }}
        id: generate_diff
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            has_diff_output="false"
            cleanup_output() {
              printf 'has_diff=%s\n' "$has_diff_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          if [ ! -f scripts/prepare_gptoss_diff.py ]; then
            echo "::notice::Скрипт scripts/prepare_gptoss_diff.py не найден, пропускаю подготовку diff"
            exit 0
          fi

          if ! python3 scripts/prepare_gptoss_diff.py \
            --repo "${{ github.repository }}" \
            --pr-number "${PR_NUMBER}" \
            --token "${GITHUB_TOKEN}" \
            --output diff.patch \
            --path ':(glob)**/*.py'; then
            echo "::warning::Не удалось подготовить diff – пропускаю обзор"
            has_diff_output="false"
            exit 0
          fi

          if [ -s diff.patch ]; then
            has_diff_output="true"
          fi

      - name: LLM review
        if: ${{
          steps.validate_event.outputs.skip != 'true'
          && steps.ensure_pr_ready.outputs.skip != 'true'
          && steps.start_llm.outputs.started == 'true'
          && steps.wait_llm.outputs.ready == 'true'
          && steps.generate_diff.outputs.has_diff == 'true'
        }}
        id: llm_review
        run: |
          set -euo pipefail

          if [ -z "${LLM_PORT:-}" ]; then
            echo "::warning::Переменная LLM_PORT не задана – пропускаю генерацию обзора" >&2
            exit 0
          fi

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            has_content_output="false"
            cleanup_output() {
              printf 'has_content=%s\n' "$has_content_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          if [ ! -f scripts/run_gptoss_review.py ]; then
            echo "::notice::Скрипт scripts/run_gptoss_review.py не найден, пропускаю генерацию обзора"
            exit 0
          fi

          if ! python3 scripts/run_gptoss_review.py \
            --diff diff.patch \
            --output review.md \
            --model "${MODEL_NAME}" \
            --api-url "http://127.0.0.1:${LLM_PORT}/v1/chat/completions"; then
            echo "::warning::Не удалось сгенерировать обзор"
            has_content_output="false"
            exit 0
          fi

          if [ -s review.md ]; then
            has_content_output="true"
          fi

      - name: Upload review artifact
        if: ${{
          steps.validate_event.outputs.skip != 'true'
          && steps.ensure_pr_ready.outputs.skip != 'true'
          && steps.wait_llm.outputs.ready == 'true'
          && steps.llm_review.outputs.has_content == 'true'
        }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: gptoss-review-${{ env.PR_NUMBER }}
          path: review.md

      - name: Comment PR
        if: ${{
          steps.validate_event.outputs.skip != 'true'
          && steps.ensure_pr_ready.outputs.skip != 'true'
          && steps.wait_llm.outputs.ready == 'true'
          && steps.llm_review.outputs.has_content == 'true'
        }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd  # v8
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: review
            });

      - name: Cleanup
        if: ${{ always() }}
        run: |
          if [ -f mock_server.pid ]; then
            kill "$(cat mock_server.pid)" || true
            rm -f mock_server.pid
          fi
          rm -f mock_server.port mock_server.log

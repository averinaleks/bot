# .github/workflows/gptoss_review.yml
# yamllint disable rule:line-length rule:truthy
---
name: GPT-OSS Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: >-
    gptoss-review-${{ github.workflow }}-${{
      (github.event.pull_request && github.event.pull_request.number)
        || (github.event.issue && github.event.issue.number)
        || github.run_id
    }}
  cancel-in-progress: true

jobs:
  skip:
    if: github.event_name != 'pull_request_target' && github.event_name != 'issue_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Skip unsupported event
        run: |
          echo "Workflow triggered for ${{ github.event_name }} – no review required."

  review:
    if: >
      (
        github.event_name == 'pull_request_target' &&
        github.event.pull_request != null &&
        github.event.pull_request.draft == false &&
        github.event.pull_request.head.repo.full_name == github.repository
      )
      || (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        github.event.comment.user.login != 'github-actions[bot]' &&
        contains(github.event.comment.body || '', '/llm-review')
      )
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    env:
      PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number || '' }}
      MODEL_NAME: ${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-0.5B-Instruct' }}

    steps:
      - name: Проверка события
        id: validate_event
        run: |
          set -euo pipefail
          pr_number="${PR_NUMBER:-}"
          if [ -z "$pr_number" ]; then
            echo "::notice::Рабочий процесс запущен не для PR – пропускаю выполнение обзора."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        if: steps.validate_event.outputs.skip != 'true'
        with:
          fetch-depth: 0
          ref: refs/pull/${{ env.PR_NUMBER }}/head

      - name: Start mock GPT-OSS server
        if: steps.validate_event.outputs.skip != 'true'
        id: start_llm
        run: |
          set -euo pipefail

          if [ -n "${GITHUB_OUTPUT:-}" ]; then
            echo "started=false" >> "${GITHUB_OUTPUT}"
          fi

          if [ ! -f scripts/gptoss_mock_server.py ]; then
            echo "::notice::Скрипт scripts/gptoss_mock_server.py не найден, пропускаю запуск mock-сервера"
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              echo "started=false" >> "$GITHUB_OUTPUT"
            fi
            exit 0
          fi

          # Ask the OS to pick a free TCP port and persist it to ``mock_server.port``.
          # Earlier revisions tried to preselect a port in bash, but the gap between
          # reserving the number and binding to it occasionally allowed another
          # process to claim the same port which crashed the mock server.  Delegating
          # the selection to the Python helper keeps the operation atomic and
          # removes the race entirely.
          python scripts/gptoss_mock_server.py \
            --host 127.0.0.1 \
            --port 0 \
            --port-file mock_server.port &
          echo $! > mock_server.pid

          ready=0
          for _ in {1..50}; do
            if [ -s mock_server.port ]; then
              port=$(cat mock_server.port)
              if [[ "$port" =~ ^[0-9]+$ ]]; then
                echo "LLM_PORT=$port" >> "$GITHUB_ENV"
                ready=1
                break
              fi
            fi
            sleep 0.2
          done

          if [ "$ready" -ne 1 ]; then
            echo "::warning::Mock GPT-OSS server did not report a port – пропускаю генерацию обзора" >&2
            if [ -f mock_server.pid ]; then
              kill "$(cat mock_server.pid)" || true
              rm -f mock_server.pid
            fi
            rm -f mock_server.port || true
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              echo "started=false" >> "$GITHUB_OUTPUT"
            fi
            exit 0
          fi

          if [ -n "${GITHUB_OUTPUT:-}" ]; then
            echo "started=true" >> "$GITHUB_OUTPUT"
          fi
        env:
          MODEL_NAME: ${{ env.MODEL_NAME }}

      - name: Wait for GPT-OSS server
        if: steps.validate_event.outputs.skip != 'true' && steps.start_llm.outputs.started == 'true'
        id: wait_llm
        run: |
          set -euo pipefail
          for _ in {1..60}; do
            if curl -sSf "http://127.0.0.1:${LLM_PORT}/v1/models" >/dev/null; then
              exit 0
            fi
            sleep 1
          done
          echo "LLM server failed to start" >&2
          if [ -f mock_server.pid ]; then
            kill "$(cat mock_server.pid)" || true
          fi
          exit 1

      - name: Generate diff
        if: steps.validate_event.outputs.skip != 'true' && steps.start_llm.outputs.started == 'true' && steps.wait_llm.conclusion == 'success'
        id: generate_diff
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          if [ -n "${GITHUB_OUTPUT:-}" ]; then
            echo "has_diff=false" >> "${GITHUB_OUTPUT}"
          fi

          if [ ! -f scripts/prepare_gptoss_diff.py ]; then
            echo "::notice::Скрипт scripts/prepare_gptoss_diff.py не найден, пропускаю подготовку diff"
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              echo "has_diff=false" >> "${GITHUB_OUTPUT}"
            fi
            exit 0
          fi

          if ! python scripts/prepare_gptoss_diff.py \
            --repo "${{ github.repository }}" \
            --pr-number "${PR_NUMBER}" \
            --token "${GITHUB_TOKEN}" \
            --output diff.patch \
            --path ':(glob)**/*.py'; then
            echo "::warning::Не удалось подготовить diff – пропускаю обзор"
            exit 0
          fi

          if [ -s diff.patch ] && [ -n "${GITHUB_OUTPUT:-}" ]; then
            echo "has_diff=true" >> "${GITHUB_OUTPUT}"
          fi

      - name: LLM review
        if: steps.validate_event.outputs.skip != 'true' && steps.start_llm.outputs.started == 'true' && steps.generate_diff.outputs.has_diff == 'true'
        id: llm_review
        run: |
          set -euo pipefail

          if [ -n "${GITHUB_OUTPUT:-}" ]; then
            echo "has_content=false" >> "${GITHUB_OUTPUT}"
          fi

          if [ ! -f scripts/run_gptoss_review.py ]; then
            echo "::notice::Скрипт scripts/run_gptoss_review.py не найден, пропускаю генерацию обзора"
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              echo "has_content=false" >> "${GITHUB_OUTPUT}"
            fi
            exit 0
          fi

          if ! python scripts/run_gptoss_review.py \
            --diff diff.patch \
            --output review.md \
            --model "${MODEL_NAME}" \
            --api-url "http://127.0.0.1:${LLM_PORT}/v1/chat/completions"; then
            echo "::warning::Не удалось сгенерировать обзор"
            exit 0
          fi

          if [ -s review.md ] && [ -n "${GITHUB_OUTPUT:-}" ]; then
            echo "has_content=true" >> "${GITHUB_OUTPUT}"
          fi

      - name: Upload review artifact
        if: steps.validate_event.outputs.skip != 'true' && steps.llm_review.outputs.has_content == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: gptoss-review-${{ env.PR_NUMBER }}
          path: review.md

      - name: Comment PR
        if: steps.validate_event.outputs.skip != 'true' && steps.llm_review.outputs.has_content == 'true'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd  # v8
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: review
            });

      - name: Cleanup
        if: always()
        run: |
          if [ -f mock_server.pid ]; then
            kill "$(cat mock_server.pid)" || true
            rm -f mock_server.pid
          fi
          rm -f mock_server.port

# yamllint disable rule:line-length
---
name: GPT-OSS Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    if: >-
      (github.event_name == 'pull_request_target' &&
       github.event.pull_request.draft == false) ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request != null &&
       contains(github.event.comment.body, '/llm-review'))
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: >-
        ${{ github.event.pull_request.number ||
           github.event.issue.number }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0
          ref: refs/pull/${{ env.PR_NUMBER }}/head
      - name: Start vLLM container
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN || '' }}
        run: |
          docker run -d --rm --name gptoss \
            -e HUGGING_FACE_HUB_TOKEN="$HF_TOKEN" \
            -p 127.0.0.1:8000:8000 \
            vllm/vllm-openai:v0.5.1 \
            --model "${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-1.5B-Instruct' }}" \
            --trust-remote-code \
            --device cpu
      - name: Wait for LLM container
        run: |
          # The model can take a while to load, especially on fresh runners
          # Allow extra time for the container to become ready
          for i in {1..1200}; do
            if docker ps --filter "name=gptoss" --filter "status=running" | grep -q gptoss && \
               curl -sf http://127.0.0.1:8000/v1/models; then
              exit 0
            fi
            if ! docker ps --filter "name=gptoss" | grep -q gptoss; then
              echo "LLM container exited" >&2
              docker logs gptoss || true
              exit 1
            fi
            sleep 1
          done
          echo "LLM container failed to start" >&2
          docker logs gptoss || true
          exit 1
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Generate diff
        id: generate-diff
        if: success()
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          pull_info=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER)
          base_sha=$(echo "$pull_info" | jq -r .base.sha)
          base_ref=$(echo "$pull_info" | jq -r .base.ref)
          if [ -z "$base_sha" ] || [ "$base_sha" = "null" ] || \
             [ -z "$base_ref" ] || [ "$base_ref" = "null" ]; then
            echo "Error: failed to retrieve base revision information" >&2
            exit 1
          fi
          git fetch origin "$base_ref"
          git diff $base_sha...HEAD -- ':(glob)**/*.py' > diff.patch
          head -c 200000 diff.patch > diff.trunc && mv diff.trunc diff.patch
          # crude token count (words) to detect overly large diffs
          token_limit=6000
          token_count=$(wc -w < diff.patch)
          echo "Token count: $token_count"
          if [ "$token_count" -gt "$token_limit" ]; then
            echo "Diff too large, regenerating with 20 lines of context"
            git diff -U20 $base_sha...HEAD -- ':(glob)**/*.py' > diff.patch
            head -c 200000 diff.patch > diff.trunc && mv diff.trunc diff.patch
            token_count=$(wc -w < diff.patch)
            echo "Token count after context reduction: $token_count"
          fi
          if [ "$token_count" -gt "$token_limit" ]; then
            echo "Diff still large, splitting into chunks"
            split -b 100000 diff.patch diff_part_
          fi
          if [ -s diff.patch ]; then
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
          fi
      - name: LLM review
        if: steps.generate-diff.outputs.has_diff == 'true'
        id: llm-review
        run: |
          model="${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-1.5B-Instruct' }}"
          review=""
          if compgen -G "diff_part_*" > /dev/null; then
            for part in diff_part_*; do
              payload=$(jq -n --arg diff "$(cat "$part")" --arg model "$model" \
                '{model:$model, messages:[{role:"user", content:"Review the following diff and provide feedback:\n" + $diff}]}')
              part_review=$(curl -s -H "Content-Type: application/json" -d "$payload" \
                http://127.0.0.1:8000/v1/chat/completions | jq -r '.choices[0].message.content')
              review="${review}${part_review}\n"
            done
          else
            payload=$(jq -n --arg diff "$(cat diff.patch)" --arg model "$model" \
              '{model:$model, messages:[{role:"user", content:"Review the following diff and provide feedback:\n" + $diff}]}')
            review=$(curl -s -H "Content-Type: application/json" -d "$payload" \
              http://127.0.0.1:8000/v1/chat/completions | jq -r '.choices[0].message.content')
          fi
          if [ -z "$review" ]; then
            echo "has_content=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          printf "%s" "$review" > review.md
          echo "has_content=true" >> "$GITHUB_OUTPUT"
      - name: Comment PR
        if: always() && steps.llm-review.outputs.has_content == 'true'
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd  # v8.0.0
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: review,
            });
      - name: Cleanup
        if: always()
        run: docker rm -f gptoss || true

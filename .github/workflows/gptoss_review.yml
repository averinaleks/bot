# .github/workflows/gptoss_review.yml
# yamllint disable rule:line-length
name: GPT-OSS Code Review

on:
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    # Защита: не запускаем на fork без метки "safe-to-test"
    if: >-
      ((github.event_name == 'pull_request_target') &&
       (github.event.pull_request != null) &&
       (github.event.pull_request.draft == false) &&
       (github.event.pull_request.head.repo.full_name == github.repository ||
        contains(github.event.pull_request.labels.*.name, 'safe-to-test')))
      || (github.event_name == 'issue_comment' &&
          github.event.issue != null &&
          github.event.issue.pull_request != null &&
          github.event.comment != null &&
          contains(github.event.comment.body || '', '/llm-review'))
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
      MODEL_NAME: ${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-1.5B-Instruct' }}
      HF_TOKEN: ${{ secrets.HF_TOKEN || '' }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          ref: refs/pull/${{ env.PR_NUMBER }}/head

      - name: Start vLLM container (isolated)
        run: |
          set -euo pipefail
          docker run -d --rm --name gptoss \
            -e HUGGING_FACE_HUB_TOKEN="$HF_TOKEN" \
            -p 127.0.0.1:8000:8000 \
            vllm/vllm-openai:v0.10.1 \
            --model "${MODEL_NAME}" \
            --trust-remote-code \
            --device cpu

      - name: Wait for LLM container (with backoff)
        id: wait_llm
        run: |
          set -euo pipefail
          for i in $(seq 1 60); do
            if docker ps --filter "name=gptoss" --filter "status=running" | grep -q gptoss; then
              if curl -sS --max-time 2 http://127.0.0.1:8000/v1/models > /dev/null; then
                echo "ok=1" >> "$GITHUB_OUTPUT"
                exit 0
              fi
            else
              echo "LLM container exited"
              docker logs gptoss || true
              exit 1
            fi
            sleep 5
          done
          echo "LLM container failed to become ready"
          docker logs gptoss || true
          exit 1

      - name: Install jq
        if: steps.wait_llm.outcome == 'success'
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate diff
        id: generate_diff
        if: steps.wait_llm.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          pull_info=$(curl -sSf -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}")
          base_sha=$(echo "$pull_info" | jq -r .base.sha)
          base_ref=$(echo "$pull_info" | jq -r .base.ref)
          [ -n "$base_sha" ] && [ "$base_sha" != "null" ] && [ -n "$base_ref" ] && [ "$base_ref" != "null" ]
          git fetch --no-tags --depth=50 origin "$base_ref"
          git diff "$base_sha"...HEAD -- ':(glob)**/*.py' > diff.patch || true
          if [ ! -s diff.patch ]; then
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          head -c 200000 diff.patch > diff.patch
          echo "has_diff=true" >> "$GITHUB_OUTPUT"

      - name: LLM review
        if: steps.generate_diff.outputs.has_diff == 'true'
        id: llm_review
        run: |
          set -euo pipefail
          model="${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-1.5B-Instruct' }}"
          payload=$(jq -n --arg diff "$(cat diff.patch)" --arg model "$model" \
            '{model:$model, messages:[{role:"user", content:"Review the following diff and provide feedback:\n" + $diff}]}' )
          resp=$(curl -sSf -H "Content-Type: application/json" -d "$payload" \
            http://127.0.0.1:8000/v1/chat/completions)
          review=$(echo "$resp" | jq -r '.choices[0].message.content // empty')
          if [ -z "$review" ]; then
            echo "has_content=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          printf "%s" "$review" > review.md
          echo "has_content=true" >> "$GITHUB_OUTPUT"

      - name: Upload review artifact
        if: steps.llm_review.outputs.has_content == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gptoss-review-${{ env.PR_NUMBER }}
          path: review.md

      - name: Comment PR
        if: steps.llm_review.outputs.has_content == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body: review });

      - name: Cleanup
        if: always()
        run: docker rm -f gptoss || true

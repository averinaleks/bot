# .github/workflows/gptoss_review.yml
# yamllint disable rule:line-length rule:truthy
---
name: GPT-OSS Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  issue_comment:
    types: [created]
  push:
    branches:
      - main
    paths:
      - '.github/workflows/gptoss_review.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: >-
    ${{ format(
      'gptoss-review-{0}-{1}',
      github.workflow,
      (github.event_name == 'pull_request' && github.event.pull_request.number)
        || (github.event_name == 'issue_comment' && github.event.issue.number)
        || github.run_id
    ) }}
  cancel-in-progress: true

jobs:
  evaluate:
    runs-on: ubuntu-latest
    outputs:
      run_review: ${{ steps.decision.outputs.run_review }}
      pr_number: ${{ steps.decision.outputs.pr_number }}
      skip_reason: ${{ steps.decision.outputs.skip_reason }}
    steps:
      - name: Determine execution mode
        id: decision
        env:
          EVENT_NAME: ${{ github.event_name }}
          REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number || '' }}
          PR_DRAFT: ${{ github.event.pull_request.draft || 'false' }}
          PR_HEAD_REPO: ${{ github.event.pull_request.head.repo.full_name || '' }}
          ISSUE_NUMBER: ${{ github.event.issue.number || '' }}
          ISSUE_IS_PR: ${{ github.event.issue.pull_request != null }}
          COMMENT_AUTHOR: ${{ github.event.comment.user.login || '' }}
          COMMENT_AUTHOR_ASSOC: ${{ github.event.comment.author_association || '' }}
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
        run: |
          set -euo pipefail

          run_review=false
          pr_number=""
          skip_reason=""

          case "$EVENT_NAME" in
            pull_request)
              pr_number="${PR_NUMBER:-}"
              pr_draft="${PR_DRAFT:-false}"
              pr_head_repo="${PR_HEAD_REPO:-}"
              if [ -z "$pr_number" ]; then
                skip_reason="PR не найден"
              elif [ "$pr_draft" = "true" ]; then
                skip_reason="PR находится в состоянии draft"
              elif [ -n "$pr_head_repo" ] && [ "$pr_head_repo" != "$REPOSITORY" ]; then
                skip_reason="PR создан из внешнего репозитория"
              else
                run_review=true
              fi
              ;;
            pull_request_target)
              pr_number="${PR_NUMBER:-}"
              skip_reason="Workflow triggered for pull_request_target – обзор не выполняется"
              if [ -z "$pr_number" ]; then
                skip_reason="PR не найден"
              fi
              ;;
            issue_comment)
              issue_is_pr="${ISSUE_IS_PR:-false}"
              if [ "$issue_is_pr" = "true" ]; then
                pr_number="${ISSUE_NUMBER:-}"
              else
                pr_number=""
              fi
              comment_author="${COMMENT_AUTHOR:-}"
              author_assoc="${COMMENT_AUTHOR_ASSOC:-}"
              comment_body="${COMMENT_BODY:-}"
              comment_body_lower="${comment_body,,}"
              if [ -z "$pr_number" ]; then
                skip_reason="Комментарий не относится к pull request"
              elif [ "$comment_author" = "github-actions[bot]" ]; then
                skip_reason="Комментарий создан GitHub Actions – обзор не требуется"
              elif [[ ! "$author_assoc" =~ ^(OWNER|MEMBER|COLLABORATOR)$ ]]; then
                skip_reason="Комментарий создан пользователем с ролью ${author_assoc:-unknown}"
              elif [[ "$comment_body_lower" != *"/llm-review"* ]]; then
                skip_reason="Комментарий не содержит /llm-review"
              else
                run_review=true
              fi
              ;;
            *)
              skip_reason="Workflow triggered for $EVENT_NAME – no review required."
              ;;
          esac

          if [ "$run_review" = true ]; then
            skip_reason=""
          elif [ -z "$skip_reason" ]; then
            skip_reason="Workflow triggered for $EVENT_NAME – no review required."
          fi

          if [ -n "${GITHUB_OUTPUT:-}" ]; then
            {
              echo "run_review=$run_review"
              echo "pr_number=$pr_number"
              echo "skip_reason=$skip_reason"
            } >>"$GITHUB_OUTPUT"
          else
            echo "::debug::Переменная GITHUB_OUTPUT не задана – пропускаю экспорт выходных данных evaluate."
          fi

  skip:
    needs: evaluate
    if: ${{ needs.evaluate.outputs.run_review != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Skip unsupported event
        run: |
          message="${{ needs.evaluate.outputs.skip_reason }}"
          if [ -z "$message" ]; then
            message="Workflow triggered for ${{ github.event_name }} – no review required."
          fi
          echo "$message"

  review:
    needs: evaluate
    if: >-
      ${{ needs.evaluate.outputs.run_review == 'true'
          && needs.evaluate.outputs.skip_reason == '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: bash
    env:
      PR_NUMBER: ${{ needs.evaluate.outputs.pr_number }}
      MODEL_NAME: ${{ vars.LLM_MODEL || 'Qwen/Qwen2.5-Coder-0.5B-Instruct' }}
      HELPERS_DIR: gptoss_helpers
    steps:
      - name: Проверка события
        id: validate_event
        run: |
          set -euo pipefail
          pr_number="${PR_NUMBER:-}"
          if [ -z "$pr_number" ]; then
            echo "::notice::Рабочий процесс запущен не для PR – пропускаю выполнение обзора."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "skip=false" >> "$GITHUB_OUTPUT"

      - name: Checkout workflow helpers
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && github.event_name != 'pull_request_target' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 1
          ref: ${{ github.event.repository.default_branch }}
          path: ${{ env.HELPERS_DIR }}

      - name: Preserve workflow helpers outside workspace
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && github.event_name != 'pull_request_target' }}
        run: |
          set -euo pipefail

          source_dir="${HELPERS_DIR:-}"
          if [ -z "$source_dir" ]; then
            echo "::warning::Переменная HELPERS_DIR не задана – пропускаю сохранение вспомогательных скриптов" >&2
            exit 0
          fi
          if [ ! -d "$source_dir" ]; then
            echo "::warning::Каталог $source_dir не найден – пропускаю сохранение вспомогательных скриптов" >&2
            exit 0
          fi

          runner_temp="${RUNNER_TEMP:-}"
          if [ -z "$runner_temp" ]; then
            echo "::warning::Переменная RUNNER_TEMP не задана – пропускаю сохранение вспомогательных скриптов" >&2
            exit 0
          fi

          safe_dir="${runner_temp%/}/gptoss_helpers"
          rm -rf "$safe_dir"
          mkdir -p "$safe_dir"
          cp -R "$source_dir/." "$safe_dir"
          printf 'HELPERS_DIR=%s\n' "$safe_dir" >> "$GITHUB_ENV"

      - name: Проверка статуса PR
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && github.event_name != 'pull_request_target'
              && (github.event_name == 'pull_request'
                  || github.event_name == 'issue_comment') }}
        id: ensure_pr_ready
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail

          if [ "${GITHUB_EVENT_NAME:-}" = "pull_request_target" ]; then
            echo "::notice::Workflow triggered for pull_request_target – пропускаю проверку PR"
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              {
                echo "skip=true"
                echo "head_sha="
              } >>"$GITHUB_OUTPUT"
            fi
            exit 0
          fi

          helpers_dir="${HELPERS_DIR:-gptoss_helpers}"
          script_path="${helpers_dir}/scripts/check_pr_status.py"
          fallback_path="scripts/check_pr_status.py"

          if [ ! -f "$script_path" ]; then
            if [ -f "$fallback_path" ]; then
              echo "::notice::Скрипт ${helpers_dir}/scripts/check_pr_status.py не найден, использую $fallback_path"
              script_path="$fallback_path"
            else
              echo "::notice::Скрипт ${helpers_dir}/scripts/check_pr_status.py не найден, пропускаю проверку PR"
              if [ -n "${GITHUB_OUTPUT:-}" ]; then
                {
                  echo "skip=true"
                  echo "head_sha="
                } >>"$GITHUB_OUTPUT"
              fi
              exit 0
            fi
          fi

          repo="${REPOSITORY:-}"
          token="${GITHUB_TOKEN:-}"

          if [ -z "$repo" ]; then
            echo "::notice::Переменная REPOSITORY не задана – пропускаю проверку PR"
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              {
                echo "skip=true"
                echo "head_sha="
              } >>"$GITHUB_OUTPUT"
            fi
            exit 0
          fi

          if ! python3 "$script_path" \
            --repo "$repo" \
            --pr-number "${PR_NUMBER:-}" \
            --token "$token"; then
            echo "::warning::Проверка статуса PR завершилась с ошибкой – пропускаю обзор"
            if [ -n "${GITHUB_OUTPUT:-}" ]; then
              {
                echo "skip=true"
                echo "head_sha="
              } >>"$GITHUB_OUTPUT"
            fi
            exit 0
          fi

      - name: Checkout PR head
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && github.event_name == 'pull_request'
              && github.event.pull_request.head.repo.full_name == github.repository
              && env.PR_NUMBER != '' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout repository
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && github.event_name != 'pull_request'
              && env.PR_NUMBER != '' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0
          ref: ${{ format('refs/pull/{0}/head', env.PR_NUMBER) }}

      - name: Start mock GPT-OSS server
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && (github.event_name != 'issue_comment'
                  || github.event.comment.author_association == 'OWNER'
                  || github.event.comment.author_association == 'MEMBER'
                  || github.event.comment.author_association == 'COLLABORATOR') }}
        id: start_llm
        run: |
          set -euo pipefail

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            started_output="false"
            cleanup_output() {
              printf 'started=%s\n' "$started_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          helpers_dir="${HELPERS_DIR:-gptoss_helpers}"
          script_path="${helpers_dir}/scripts/gptoss_mock_server.py"
          fallback_path="scripts/gptoss_mock_server.py"

          if [ ! -f "$script_path" ]; then
            if [ -f "$fallback_path" ]; then
              echo "::notice::Скрипт ${helpers_dir}/scripts/gptoss_mock_server.py не найден, использую $fallback_path"
              script_path="$fallback_path"
            else
              echo "::notice::Скрипт ${helpers_dir}/scripts/gptoss_mock_server.py не найден, пропускаю запуск mock-сервера"
              exit 0
            fi
          fi

          python3 "$script_path" \
            --host 127.0.0.1 \
            --port 0 \
            --port-file mock_server.port \
            >mock_server.log 2>&1 &
          echo $! > mock_server.pid

          if ! kill -0 "$(cat mock_server.pid)" 2>/dev/null; then
            echo "::warning::Mock GPT-OSS server exited immediately" >&2
            if [ -s mock_server.log ]; then
              sed 's/^/mock-server: /' mock_server.log >&2 || true
            fi
            rm -f mock_server.pid mock_server.port mock_server.log
            exit 0
          fi

          ready=0
          for _ in {1..50}; do
            if [ -s mock_server.port ]; then
              port=$(cat mock_server.port)
              if [[ "$port" =~ ^[0-9]+$ ]]; then
                if [ -n "${GITHUB_ENV:-}" ]; then
                  echo "LLM_PORT=$port" >> "$GITHUB_ENV"
                  ready=1
                else
                  echo "::warning::Переменная GITHUB_ENV не задана – не удалось экспортировать порт LLM" >&2
                fi
                break
              fi
            fi
            sleep 0.2
          done

          if [ "$ready" -ne 1 ]; then
            echo "::warning::Mock GPT-OSS server did not report a port – пропускаю генерацию обзора" >&2
            if [ -f mock_server.pid ]; then
              kill "$(cat mock_server.pid)" || true
              rm -f mock_server.pid
            fi
            if [ -s mock_server.log ]; then
              sed 's/^/mock-server: /' mock_server.log >&2 || true
            fi
            rm -f mock_server.port mock_server.log || true
            exit 0
          fi

          started_output="true"
        env:
          MODEL_NAME: "${{ env.MODEL_NAME }}"
      - name: Wait for GPT-OSS server
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && steps.start_llm.outputs.started == 'true' }}
        id: wait_llm
        run: |
          set -euo pipefail

          if [ -z "${LLM_PORT:-}" ]; then
            echo "::warning::Переменная LLM_PORT не задана – пропускаю ожидание сервера" >&2
            exit 0
          fi

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            ready_output="false"
            cleanup_output() {
              printf 'ready=%s\n' "$ready_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          ready=0
          for _ in {1..60}; do
            if curl -sSf "http://127.0.0.1:${LLM_PORT}/v1/models" >/dev/null; then
              ready=1
              break
            fi
            sleep 1
          done

          if [ "$ready" -ne 1 ]; then
            echo "::warning::LLM server failed to start" >&2
            if [ -f mock_server.pid ]; then
              kill "$(cat mock_server.pid)" || true
              rm -f mock_server.pid
            fi
            rm -f mock_server.port mock_server.log || true
            exit 0
          fi

          ready_output="true"

      - name: Generate diff
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && steps.start_llm.outputs.started == 'true'
              && steps.wait_llm.outputs.ready == 'true' }}
        id: generate_diff
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            has_diff_output="false"
            cleanup_output() {
              printf 'has_diff=%s\n' "$has_diff_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          helpers_dir="${HELPERS_DIR:-gptoss_helpers}"
          script_path="${helpers_dir}/scripts/prepare_gptoss_diff.py"
          fallback_path="scripts/prepare_gptoss_diff.py"

          if [ ! -f "$script_path" ]; then
            if [ -f "$fallback_path" ]; then
              echo "::notice::Скрипт ${helpers_dir}/scripts/prepare_gptoss_diff.py не найден, использую $fallback_path"
              script_path="$fallback_path"
            else
              echo "::notice::Скрипт ${helpers_dir}/scripts/prepare_gptoss_diff.py не найден, пропускаю подготовку diff"
              exit 0
            fi
          fi

          if ! python3 "$script_path" \
            --repo "${{ github.repository }}" \
            --pr-number "${PR_NUMBER}" \
            --token "${GITHUB_TOKEN}" \
            --output diff.patch \
            --path ':(glob)**/*.py'; then
            echo "::warning::Не удалось подготовить diff – пропускаю обзор"
            has_diff_output="false"
            exit 0
          fi

          if [ -s diff.patch ]; then
            has_diff_output="true"
          fi

      - name: LLM review
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && steps.start_llm.outputs.started == 'true'
              && steps.wait_llm.outputs.ready == 'true'
              && steps.generate_diff.outputs.has_diff == 'true' }}
        id: llm_review
        run: |
          set -euo pipefail

          if [ -z "${LLM_PORT:-}" ]; then
            echo "::warning::Переменная LLM_PORT не задана – пропускаю генерацию обзора" >&2
            exit 0
          fi

          output_file="${GITHUB_OUTPUT:-}"
          if [ -n "$output_file" ]; then
            has_content_output="false"
            cleanup_output() {
              printf 'has_content=%s\n' "$has_content_output" >> "$output_file"
            }
            trap cleanup_output EXIT
          fi

          helpers_dir="${HELPERS_DIR:-gptoss_helpers}"
          script_path="${helpers_dir}/scripts/run_gptoss_review.py"
          fallback_path="scripts/run_gptoss_review.py"

          if [ ! -f "$script_path" ]; then
            if [ -f "$fallback_path" ]; then
              echo "::notice::Скрипт ${helpers_dir}/scripts/run_gptoss_review.py не найден, использую $fallback_path"
              script_path="$fallback_path"
            else
              echo "::notice::Скрипт ${helpers_dir}/scripts/run_gptoss_review.py не найден, пропускаю генерацию обзора"
              exit 0
            fi
          fi

          if ! python3 "$script_path" \
            --diff diff.patch \
            --output review.md \
            --model "${MODEL_NAME}" \
            --api-url "http://127.0.0.1:${LLM_PORT}/v1/chat/completions"; then
            echo "::warning::Не удалось сгенерировать обзор"
            has_content_output="false"
            exit 0
          fi

          if [ -s review.md ]; then
            has_content_output="true"
          fi

      - name: Upload review artifact
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && steps.wait_llm.outputs.ready == 'true'
              && steps.llm_review.outputs.has_content == 'true' }}
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4  # v4
        with:
          name: gptoss-review-${{ env.PR_NUMBER }}
          path: review.md

      - name: Comment PR
        if: >-
          ${{ steps.validate_event.outputs.skip != 'true'
              && steps.ensure_pr_ready.outputs.skip != 'true'
              && steps.wait_llm.outputs.ready == 'true'
              && steps.llm_review.outputs.has_content == 'true' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd  # v8
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('review.md', 'utf8');
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: review
            });

      - name: Cleanup
        if: ${{ always() }}
        run: |
          if [ -f mock_server.pid ]; then
            kill "$(cat mock_server.pid)" || true
            rm -f mock_server.pid
          fi
          rm -f mock_server.port mock_server.log

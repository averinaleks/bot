---
# yamllint disable rule:line-length rule:truthy
name: Build and Push Docker image
permissions:
  contents: read
  packages: write
  actions: write

on:
  push:
    branches: ["main", "master"]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

concurrency:
  group: docker-publish-${{ github.head_ref || github.ref_name || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      PUBLISH_IMAGES: >-
        ${{ github.repository == 'averinaleks/bot'
           && github.event_name != 'pull_request'
           && github.event_name != 'pull_request_target' }}
      PUBLISH_DOCKERHUB: >-
        ${{ github.repository == 'averinaleks/bot'
           && github.event_name != 'pull_request'
           && github.event_name != 'pull_request_target'
           && secrets.DOCKERHUB_USERNAME != ''
           && secrets.DOCKERHUB_USERNAME != null
           && secrets.DOCKERHUB_TOKEN != ''
           && secrets.DOCKERHUB_TOKEN != null }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - file: Dockerfile.cpu
            image: bot-cpu
            artifact: trivy-report-cpu
          - file: Dockerfile.ci
            image: bot-ci
            artifact: trivy-report-ci
          - file: Dockerfile.gptoss
            image: bot-gptoss
            artifact: trivy-report-gptoss

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
        with:
          persist-credentials: false
      - name: Free disk space
        shell: bash
        run: |
          set -euxo pipefail

          # Отключаем и удаляем swap, чтобы избежать переполнения buildx при
          # выделении временных LVM-томов в maximize-build-space.
          if sudo swapon --summary | grep -q .; then
            sudo swapoff -a || true
          fi
          sudo rm -f /swapfile || true

          # Чистим предустановленные SDK и кэши, которые занимают десятки
          # гигабайт и не используются при сборке Docker-образов.
          sudo rm -rf \
            /usr/local/lib/android \
            /usr/local/share/boost \
            /usr/share/dotnet \
            /usr/lib/google-cloud-sdk \
            /opt/ghc \
            /opt/hostedtoolcache || true

          if [[ -n "${AGENT_TOOLSDIRECTORY:-}" && -d "${AGENT_TOOLSDIRECTORY}" ]]; then
            sudo rm -rf "${AGENT_TOOLSDIRECTORY}" || true
          fi

          # Убираем остатки кэшей APT и докера. Эти команды не являются
          # критичными, поэтому выполняем их в best-effort режиме.
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo docker system prune -af || true

          # Показываем итоговое свободное место для быстрой диагностики.
          df -h /
      - name: Prepare build mount dir
        run: |
          set -euo pipefail
          sudo mkdir -p /mnt
          if [ -e /dev/buildvg/buildlv ]; then
            sudo wipefs -a /dev/buildvg/buildlv || true
          else
            echo "Device /dev/buildvg/buildlv not found, skipping wipefs"
          fi
          sudo swapoff /mnt/swapfile || true
          sudo rm -f /mnt/swapfile || true
          sudo rm -rf /mnt/* || true
      - name: Install LVM
        run: sudo apt-get update && sudo apt-get install -y lvm2
      - name: Maximize build space
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c  # v10
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 100
          swap-size-mb: 4096
          build-mount-path: /mnt
          pv-loop-path: /mnt/root-pv.img
          tmp-pv-loop-path: /mnt/tmp-pv.img

      - name: Verify root and /mnt free space
        run: |
          set -euo pipefail
          df -h /
          df -h /mnt

      - name: Relocate Docker storage to /mnt
        run: |
          set -euo pipefail
          if command -v systemctl >/dev/null; then
            sudo systemctl stop docker || true
          else
            sudo service docker stop || true
          fi
          sudo mv /var/lib/docker /mnt/docker || true
          sudo ln -sfn /mnt/docker /var/lib/docker
          if command -v systemctl >/dev/null; then
            sudo systemctl start docker
          else
            sudo service docker start
          fi

      - name: Wait for Docker daemon
        run: |
          set -euo pipefail
          for attempt in $(seq 1 30); do
            if docker info >/dev/null 2>&1 || sudo docker info >/dev/null 2>&1; then
              exit 0
            fi
            sleep 2
          done
          docker info

      - name: Set up Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3
        with:
          driver: docker-container
          # Buildx v0.16.2, опубликованный 2025-09-26, запрашивает образ
          # ``moby/buildkit:v0.16.2``. Этот тег отсутствует на Docker Hub и
          # приводит к "manifest unknown" ещё до запуска сборки. Явно откатываемся
          # на предыдущую стабильную версию Buildx и жёстко фиксируем рабочий
          # образ BuildKit, который умеет OCI media types и уже применялся в
          # репозитории без регрессий.
          version: v0.16.1
          driver-opts: |
            image=moby/buildkit:v0.25.0

      - name: Verify /mnt mount
        run: |
          mount | grep '/mnt' || true
          df -h /mnt

      - name: Purge stale BuildKit cache
        if: ${{ env.PUBLISH_IMAGES == 'true' }}
        env:
          CACHE_SCOPE: ${{ matrix.image }}-oci-v4
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          api_url="https://api.github.com/repos/${{ github.repository }}/actions/caches?key=${CACHE_SCOPE}"
          response=$(curl -sS -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer ${GITHUB_TOKEN}" "${api_url}")
          total=$(echo "${response}" | jq -r '.total_count // 0')
          if [ "${total}" -gt 0 ]; then
            echo "Found ${total} stale cache entr(ies) for scope ${CACHE_SCOPE}, deleting"
            curl -fsS -X DELETE -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer ${GITHUB_TOKEN}" "${api_url}" >/dev/null
          else
            echo "No cache entries found for scope ${CACHE_SCOPE}"
          fi

      - name: Login to Docker Hub
        if: ${{ env.PUBLISH_DOCKERHUB == 'true' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: ${{ env.PUBLISH_IMAGES == 'true' }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef  # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image tags
        id: tags
        env:
          MATRIX_IMAGE: ${{ matrix.image }}
          OWNER: ${{ github.repository_owner }}
        run: |
          set -euo pipefail
          if [[ "${PUBLISH_IMAGES}" == "true" ]]; then
            tags="ghcr.io/${OWNER}/${MATRIX_IMAGE}:latest"
            if [[ -n "${DOCKERHUB_USERNAME}" && -n "${DOCKERHUB_TOKEN}" ]]; then
              tags="${tags}"$'\n'"docker.io/${DOCKERHUB_USERNAME}/${MATRIX_IMAGE}:latest"
            fi
          else
            tags="local/${MATRIX_IMAGE}:ci-${GITHUB_RUN_ID}"
          fi
          {
            echo "list<<EOF"
            echo "${tags}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          file: ${{ matrix.file }}
          push: ${{ env.PUBLISH_IMAGES == 'true' }}
          tags: ${{ steps.tags.outputs.list }}
          # Используем отдельный scope с OCI media types, чтобы BuildKit
          # не пытался читать устаревший кэш с generic "application/octet-stream"
          # и не падал с "unexpected media type ... not found". Новый суффикс
          # ``-oci-v4`` гарантирует создание отдельного пула слоёв. ``v3`` уже
          # использовался в прошлых сборках, и BuildKit продолжал пытаться
          # читать устаревшие слои с generic ``application/octet-stream``,
          # падая с "unexpected media type ... not found". Новый суффикс
          # сбрасывает кеш, сохраняя предыдущий сценарий восстановления при
          # регрессиях и оставляя включённый ``ignore-error`` как сетку
          # безопасности.
          cache-from: type=gha,scope=${{ matrix.image }}-oci-v4,ignore-error=true
          # ``ignore-error`` избавляет от редких падений buildx с "failed to parse
          # error response 400: <h2>Our services aren't available right now</h2>"
          # при временных сбоях бэкенда GitHub Actions Cache. Для ``cache-from``
          # флаг уже включён, но запись артефакта по умолчанию прерывает сборку.
          cache-to: type=gha,scope=${{ matrix.image }}-oci-v4,mode=max,oci-mediatypes=true,ignore-error=true

      - name: Cleanup before Trivy scan
        if: ${{ env.PUBLISH_DOCKERHUB == 'true' }}
        run: |
          sudo find /tmp -maxdepth 1 -name 'trivy-*' -exec rm -rf {} + || true
          sudo rm -rf /mnt/trivy-cache /mnt/trivy-tmp || true
          rm -rf ~/.cache/trivy || true
          sudo mkdir -p /mnt/trivy-cache
          sudo chown "$(id -u):$(id -g)" /mnt/trivy-cache
      - name: Prepare Trivy temp
        if: ${{ env.PUBLISH_DOCKERHUB == 'true' }}
        run: |
          sudo mkdir -p /mnt/trivy-tmp
          sudo chown "$(id -u):$(id -g)" /mnt/trivy-tmp
      - name: Run Trivy vulnerability scanner
        if: ${{ env.PUBLISH_DOCKERHUB == 'true' }}
        id: trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8  # 0.33.1
        continue-on-error: true
        env:
          TMPDIR: /mnt/trivy-tmp
          TRIVY_CACHE_DIR: /mnt/trivy-cache
        with:
          version: v0.65.0
          image-ref: docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image }}:latest
          format: table
          output: ${{ matrix.artifact }}.txt
          scanners: vuln
      - name: Show Trivy scan results
        if: ${{ env.PUBLISH_DOCKERHUB == 'true' && steps.trivy.outcome == 'success' }}
        run: cat ${{ matrix.artifact }}.txt

      - name: Upload Trivy report artifact
        if: ${{ env.PUBLISH_DOCKERHUB == 'true' && steps.trivy.outcome == 'success' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}.txt
      - name: Cleanup Docker
        if: ${{ always() }}
        run: |
          docker buildx prune -af || true
          docker system prune -af || true

  healthcheck:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install -r requirements-healthcheck.txt
      - name: Start data handler service
        id: start_service
        env:
          TEST_MODE: "1"
          DATA_HANDLER_ALLOW_ANONYMOUS: "1"
          DATA_HANDLER_USE_STUB: "1"
        run: |
          scripts/run_data_handler_service.sh --bind 0.0.0.0:8000 &
          echo $! > "$GITHUB_WORKSPACE/service.pid"
          sleep 5
          if ! kill -0 "$(cat "$GITHUB_WORKSPACE/service.pid")" 2>/dev/null; then
            echo "service_running=false" >> "$GITHUB_OUTPUT"
          else
            echo "service_running=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Health check
        if: ${{ steps.start_service.outputs.service_running == 'true' }}
        env:
          TEST_MODE: "1"
          HEALTH_CHECK_MAX_ATTEMPTS: "10"
          HEALTH_CHECK_DELAY_SECONDS: "3"
          HEALTH_CHECK_BASE_URL: "http://127.0.0.1:8000"
          HEALTH_CHECK_ALLOWED_HOSTS: "localhost,127.0.0.1,::1"
          DATA_HANDLER_USE_STUB: "1"
        run: python scripts/health_check.py
      - name: Cleanup
        if: ${{ always() && steps.start_service.outputs.service_running == 'true' }}
        run: |
          kill "$(cat "$GITHUB_WORKSPACE/service.pid")" || true
          rm -f "$GITHUB_WORKSPACE/service.pid"

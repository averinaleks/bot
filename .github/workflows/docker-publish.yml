---
# yamllint disable rule:line-length rule:truthy
name: Build and Push Docker image
permissions:
  contents: read
  packages: write

on:
  push:
    branches: ["main", "master"]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

concurrency:
  group: docker-publish-${{ github.head_ref || github.ref_name || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - file: Dockerfile.cpu
            image: bot-cpu
            artifact: trivy-report-cpu
          - file: Dockerfile.ci
            image: bot-ci
            artifact: trivy-report-ci
          - file: Dockerfile.gptoss
            image: bot-gptoss
            artifact: trivy-report-gptoss

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
        with:
          persist-credentials: false
      - name: Free disk space
        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be  # main
        timeout-minutes: 10
        continue-on-error: true
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: true
      - name: Prepare build mount dir
        run: |
          set -euo pipefail
          sudo mkdir -p /mnt
          if [ -e /dev/buildvg/buildlv ]; then
            sudo wipefs -a /dev/buildvg/buildlv || true
          else
            echo "Device /dev/buildvg/buildlv not found, skipping wipefs"
          fi
          sudo swapoff /mnt/swapfile || true
          sudo rm -f /mnt/swapfile || true
          sudo rm -rf /mnt/* || true
      - name: Install LVM
        run: sudo apt-get update && sudo apt-get install -y lvm2
      - name: Maximize build space
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c  # v10
        with:
          root-reserve-mb: 4096
          temp-reserve-mb: 100
          swap-size-mb: 4096
          build-mount-path: /mnt
          pv-loop-path: /root-pv.img
          tmp-pv-loop-path: /mnt/tmp-pv.img

      - name: Relocate Docker storage to /mnt
        run: |
          set -euo pipefail
          if command -v systemctl >/dev/null; then
            sudo systemctl stop docker || true
          else
            sudo service docker stop || true
          fi
          sudo mv /var/lib/docker /mnt/docker || true
          sudo ln -sfn /mnt/docker /var/lib/docker
          if command -v systemctl >/dev/null; then
            sudo systemctl start docker
          else
            sudo service docker start
          fi

      - name: Prepare buildx cache directory
        run: |
          mkdir -p "$GITHUB_WORKSPACE/.buildx-cache"
          chmod -R 777 "$GITHUB_WORKSPACE/.buildx-cache"

      - name: Cache Docker layers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4
        with:
          path: ${{ github.workspace }}/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image }}-

      - name: Set up Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3
        with:
          driver: docker-container

      - name: Verify /mnt mount
        run: |
          mount | grep '/mnt' || true
          df -h /mnt

      - name: Login to Docker Hub
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image tags
        id: tags
        env:
          MATRIX_IMAGE: ${{ matrix.image }}
          OWNER: ${{ github.repository_owner }}
        run: |
          tags="ghcr.io/${OWNER}/${MATRIX_IMAGE}:latest"
          if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
            tags="$tags"$'\n'"docker.io/$DOCKERHUB_USERNAME/$MATRIX_IMAGE:latest"
          fi
          printf 'list<<EOF\n%s\nEOF\n' "$tags" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: .
          file: ${{ matrix.file }}
          push: true
          tags: ${{ steps.tags.outputs.list }}
          cache-from: type=local,src=${{ github.workspace }}/.buildx-cache
          cache-to: type=local,dest=${{ github.workspace }}/.buildx-cache-new,mode=max

      - name: Update buildx cache
        if: ${{ always() }}
        run: |
          rm -rf "$GITHUB_WORKSPACE/.buildx-cache"
          mv "$GITHUB_WORKSPACE/.buildx-cache-new" "$GITHUB_WORKSPACE/.buildx-cache" || true

      - name: Cleanup before Trivy scan
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: |
          sudo find /tmp -maxdepth 1 -name 'trivy-*' -exec rm -rf {} + || true
          sudo rm -rf /mnt/trivy-cache /mnt/trivy-tmp || true
          rm -rf ~/.cache/trivy || true
          mkdir -p /mnt/trivy-cache
      - name: Prepare Trivy temp
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        run: mkdir -p /mnt/trivy-tmp
      - name: Run Trivy vulnerability scanner
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}
        id: trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8  # 0.33.1
        continue-on-error: true
        env:
          TMPDIR: /mnt/trivy-tmp
          TRIVY_CACHE_DIR: /mnt/trivy-cache
        with:
          version: v0.65.0
          image-ref: docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ matrix.image }}:latest
          format: table
          output: ${{ matrix.artifact }}.txt
          scanners: vuln
      - name: Show Trivy scan results
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' && steps.trivy.outcome == 'success' }}
        run: cat ${{ matrix.artifact }}.txt

      - name: Upload Trivy report artifact
        if: ${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' && steps.trivy.outcome == 'success' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}.txt
      - name: Cleanup Docker
        if: ${{ always() }}
        run: |
          docker buildx prune -af || true
          docker system prune -af || true

  healthcheck:
    needs: build
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5
        with:
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c  # v6
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: python -m pip install -r requirements-healthcheck.txt
      - name: Start data handler service
        id: start_service
        run: |
          scripts/run_data_handler_service.sh --bind 0.0.0.0:8000 &
          echo $! > "$GITHUB_WORKSPACE/service.pid"
          sleep 5
          if ! kill -0 "$(cat "$GITHUB_WORKSPACE/service.pid")" 2>/dev/null; then
            echo "service_running=false" >> "$GITHUB_OUTPUT"
          else
            echo "service_running=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Health check
        if: steps.start_service.outputs.service_running == 'true'
        run: python scripts/health_check.py
      - name: Cleanup
        if: always() && steps.start_service.outputs.service_running == 'true'
        run: |
          kill "$(cat "$GITHUB_WORKSPACE/service.pid")" || true
          rm -f "$GITHUB_WORKSPACE/service.pid"

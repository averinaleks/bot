name: CI

permissions:
  contents: read

# If a job fails with a temporary runner error, rerun the workflow.
# Self-hosted runners are also supported. When contacting GitHub Support
# include the correlation ID from the run's raw logs.

on:
  workflow_dispatch:

env:
  PYTHONPYCACHEPREFIX: /mnt/pycache

jobs:
  unit:
    name: Unit tests
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        device: [cpu]
    steps:
      - name: Initial cleanup
        run: docker system prune -af && sudo rm -rf /tmp/*
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Cleanup git submodules
        run: >
          git submodule foreach --recursive sh -c "git config --quiet --local gc.auto 0 || :" || :
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo npm cache clean --force || true
          sudo rm -rf /var/lib/docker/*
        timeout-minutes: 4
        continue-on-error: true
      - name: Prepare build volume
        run: |
          if [ -e /dev/buildvg/buildlv ]; then
            sudo wipefs -a /dev/buildvg/buildlv
          else
            echo "Device /dev/buildvg/buildlv not found, skipping wipefs"
          fi
          sudo swapoff /mnt/swapfile || true
          sudo rm -f /mnt/swapfile
          sudo rm -rf /mnt/*
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 1024
          temp-reserve-mb: 100
          swap-size-mb: 4096
          build-mount-path: /mnt
          pv-loop-path: /root-pv.img
          tmp-pv-loop-path: /mnt/tmp-pv.img
      - name: Configure temp directories
        run: |
          mkdir -p /mnt/tmp /mnt/pip-cache
          echo "TMPDIR=/mnt/tmp" >> $GITHUB_ENV
          echo "PIP_CACHE_DIR=/mnt/pip-cache" >> $GITHUB_ENV
        working-directory: /mnt
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.12'
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Cache pip wheels
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.device }}-${{ hashFiles('requirements-ci.txt', 'requirements-cpu.txt') }}
      - name: Cache virtualenv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: /mnt/venv
          key: ${{ runner.os }}-venv-${{ matrix.device }}-${{ hashFiles('requirements-ci.txt', 'requirements-cpu.txt') }}
      - name: Set up virtual environment
        run: |
          if [ ! -f /mnt/venv/bin/activate ]; then
            python -m venv /mnt/venv
            source /mnt/venv/bin/activate
            mkdir -p /mnt/tmp /mnt/pip-cache
            export TMPDIR=/mnt/tmp
            export PIP_CACHE_DIR=/mnt/pip-cache
            pip install -r requirements-ci.txt
          fi
          echo "/mnt/venv/bin" >> $GITHUB_PATH
      - name: Audit dependencies
        working-directory: /mnt
        run: |
          pip install pip-audit
          pip-audit -f json -o pip-audit.json
      - name: Upload pip-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: /mnt/pip-audit.json
      - name: Run flake8
        run: flake8 .
      - name: Remove test caches
        run: |
          rm -rf /mnt/pytest_cache .pytest_cache .cache
          find . -type d -name '__pycache__' -exec rm -rf {} +
          find . -name '*.pyc' -delete
      - name: Run unit tests
        run: pytest -m "not integration" --cache-dir=/mnt/pytest_cache
      - name: Cleanup buildx
        run: docker buildx prune -af || true

  integration:
    name: Integration tests
    runs-on: ubuntu-24.04
    needs: unit
    strategy:
      matrix:
        device: [cpu]
    steps:
      - name: Initial cleanup
        run: docker system prune -af && sudo rm -rf /tmp/*
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Cleanup git submodules
        run: >
          git submodule foreach --recursive sh -c "git config --quiet --local gc.auto 0 || :" || :
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo npm cache clean --force || true
          sudo rm -rf /var/lib/docker/*
        timeout-minutes: 4
        continue-on-error: true
      - name: Prepare build volume
        run: |
          if [ -e /dev/buildvg/buildlv ]; then
            sudo wipefs -a /dev/buildvg/buildlv
          else
            echo "Device /dev/buildvg/buildlv not found, skipping wipefs"
          fi
          sudo swapoff /mnt/swapfile || true
          sudo rm -f /mnt/swapfile
          sudo rm -rf /mnt/*
      - name: Maximize build space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 1024
          temp-reserve-mb: 100
          swap-size-mb: 4096
          build-mount-path: /mnt
          pv-loop-path: /root-pv.img
          tmp-pv-loop-path: /mnt/tmp-pv.img
      - name: Configure temp directories
        run: |
          mkdir -p /mnt/tmp /mnt/pip-cache
          echo "TMPDIR=/mnt/tmp" >> $GITHUB_ENV
          echo "PIP_CACHE_DIR=/mnt/pip-cache" >> $GITHUB_ENV
        working-directory: /mnt
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: '3.12'
      - name: Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      - name: Cache pip wheels
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.device }}-${{ hashFiles('requirements-ci.txt', 'requirements-cpu.txt') }}
      - name: Cache virtualenv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: /mnt/venv
          key: ${{ runner.os }}-venv-${{ matrix.device }}-${{ hashFiles('requirements-ci.txt', 'requirements-cpu.txt') }}
      - name: Set up virtual environment
        run: |
          if [ ! -f /mnt/venv/bin/activate ]; then
            python -m venv /mnt/venv
            source /mnt/venv/bin/activate
            mkdir -p /mnt/tmp /mnt/pip-cache
            export TMPDIR=/mnt/tmp
            export PIP_CACHE_DIR=/mnt/pip-cache
            pip install -r requirements-ci.txt
          fi
          echo "/mnt/venv/bin" >> $GITHUB_PATH
      - name: Remove test caches
        run: |
          rm -rf /mnt/pytest_cache .pytest_cache .cache
          find . -type d -name '__pycache__' -exec rm -rf {} +
          find . -name '*.pyc' -delete
      - name: Run integration tests
        run: pytest -m integration --cache-dir=/mnt/pytest_cache
      - name: Cleanup buildx
        run: docker buildx prune -af || true

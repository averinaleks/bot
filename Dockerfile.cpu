# syntax=docker/dockerfile:1.6

FROM ubuntu:24.04 AS builder
ARG DEBIAN_FRONTEND=noninteractive

# Обновление linux-libc-dev устраняет CVE-2025-21976, а libgcrypt20 — CVE-2024-2236
# Дополнительно подключаем PPA deadsnakes для установки Python 3.11, поскольку
# часть зависимостей проекта ещё не поддерживает Python 3.12. Без этого pip
# пытается собирать тяжёлые пакеты из исходников и шаг сборки в CI завершается
# с ошибкой.
RUN <<'EOSHELL'
set -eux
apt-get update
apt-get upgrade -y
apt-get install -y --no-install-recommends \
    gnupg \
    ca-certificates \
    linux-libc-dev \
    libssl3t64 \
    build-essential patch \
    curl \
    zlib1g-dev
# Регистрируем PPA deadsnakes вручную, без утилиты add-apt-repository,
# чтобы не зависеть от системного python3 в базовом образе.
keyring_path=/usr/share/keyrings/deadsnakes-ppa.gpg
codename="$(. /etc/os-release && printf '%s' "$VERSION_CODENAME")"
tmp_key="$(mktemp)"
curl -fsSL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xBA6932366A755776" -o "$tmp_key"
gpg --batch --yes --dearmor -o "$keyring_path" "$tmp_key"
rm -f "$tmp_key"
chmod 644 "$keyring_path"
printf 'deb [signed-by=%s] http://ppa.launchpad.net/deadsnakes/ppa/ubuntu %s main\n' \
  "$keyring_path" "$codename" > /etc/apt/sources.list.d/deadsnakes-ppa.list
apt-get update
apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3.11-distutils
python3.11 -m ensurepip --upgrade
python3.11 -m pip install --no-cache-dir --break-system-packages \
    'pip>=24.0' \
    'setuptools>=78.1.1,<81' \
    wheel
apt-get purge -y --auto-remove gnupg || true
apt-get clean
rm -rf /var/lib/apt/lists/*
EOSHELL

WORKDIR /app

COPY requirements-core.txt .

ENV VIRTUAL_ENV=/app/venv
# pip >=24.0 устраняет CVE-2023-32681, setuptools>=78.1.1 закрывает актуальные уязвимости
# и подходит для сборки gymnasium.
RUN python3.11 -m venv "$VIRTUAL_ENV"

RUN "$VIRTUAL_ENV"/bin/python -m ensurepip --upgrade

RUN "$VIRTUAL_ENV"/bin/pip install --no-cache-dir \
        'pip>=24.0' \
        'setuptools>=78.1.1,<81' \
        wheel

RUN "$VIRTUAL_ENV"/bin/pip install --no-cache-dir \
        --extra-index-url https://download.pytorch.org/whl/cpu \
        -r requirements-core.txt

RUN "$VIRTUAL_ENV"/bin/python - <<'PY'
import textwrap

exec(textwrap.dedent("""
    import hashlib
    import pathlib
    import urllib.request

    try:
        import ray  # type: ignore
    except Exception:
        print("Ray отсутствует, пропускаем обновление commons-lang3")
    else:
        jars_dir = pathlib.Path(ray.__file__).resolve().parent / "jars"
        jars_dir.mkdir(parents=True, exist_ok=True)
        for jar in jars_dir.glob("commons-lang3-*.jar"):
            jar.unlink()
        commons_lang3_url = (
            "https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.18.0/"
            "commons-lang3-3.18.0.jar"
        )
        commons_lang3_sha256 = (
            "4eeeae8d20c078abb64b015ec158add383ac581571cddc45c68f0c9ae0230720"
        )
        destination = jars_dir / "commons-lang3-3.18.0.jar"
        hasher = hashlib.sha256()
        with urllib.request.urlopen(commons_lang3_url) as response, destination.open("wb") as fh:
            while True:
                chunk = response.read(8192)
                if not chunk:
                    break
                fh.write(chunk)
                hasher.update(chunk)

        digest = hasher.hexdigest()
        if digest != commons_lang3_sha256:
            destination.unlink(missing_ok=True)
            raise RuntimeError(
                "SHA256 mismatch while downloading commons-lang3: expected "
                f"{commons_lang3_sha256}, got {digest}"
            )
"""))
PY

# NOTE: keep the cleanup below in a dedicated RUN step. Using an explicit Bash
# invocation with ``set -euo pipefail`` prevents the Docker parser from
# splitting the first command token (``nvidia_packages=...``) into a separate
# instruction, a behaviour that historically produced "dockerfile parse error"
# failures in the docker-publish workflow. Historical context:
# https://github.com/averinaleks/bot/actions/workflows/docker-publish.yml

RUN /bin/bash -euo pipefail -c "\
  nvidia_packages=\"\$($VIRTUAL_ENV/bin/pip freeze | grep -i '^nvidia-' || true)\"; \
  if [ -n \"\$nvidia_packages\" ]; then \
    printf '%s\\n' \"\$nvidia_packages\" | cut -d= -f1 | xargs -r $VIRTUAL_ENV/bin/pip uninstall -y; \
  else \
    echo 'No NVIDIA packages detected in the virtual environment'; \
  fi; \
  find \"$VIRTUAL_ENV\" -type d -name '__pycache__' -exec rm -rf {} +; \
  find \"$VIRTUAL_ENV\" -type f -name '*.pyc' -delete\
"

FROM ubuntu:24.04
ARG DEBIAN_FRONTEND=noninteractive

# Переносим ключ и список репозитория deadsnakes из builder-образа, чтобы
# избежать повторного импорта ключа через gnupg в рантайме.
COPY --from=builder /usr/share/keyrings/deadsnakes-ppa.gpg /usr/share/keyrings/deadsnakes-ppa.gpg
COPY --from=builder /etc/apt/sources.list.d/deadsnakes-ppa.list /etc/apt/sources.list.d/deadsnakes-ppa.list

# Обновляем систему перед установкой зависимостей выполнения и добавляем Python 3.11
# из PPA deadsnakes, чтобы среда рантайма совпадала с окружением сборки.
RUN <<'EOSHELL'
set -eux
apt-get update
apt-get upgrade -y
apt-get install -y --no-install-recommends \
    ca-certificates \
    libssl3t64 \
    # Библиотека OpenMP требуется бинарям scikit-learn и NumPy.
    libgomp1 \
    curl \
    # Исключаем tar, чтобы избежать CVE-2025-45582
    coreutils libgcrypt20 login passwd \
    python3.11 \
    python3.11-minimal \
    python3.11-distutils
apt-get clean
rm -rf /var/lib/apt/lists/*
if [ ! -e /usr/local/bin/python3 ]; then
    ln -s /usr/bin/python3.11 /usr/local/bin/python3
fi
/usr/bin/python3.11 --version
EOSHELL

WORKDIR /app

COPY --from=builder /app/venv /app/venv
COPY . .

ENV VIRTUAL_ENV=/app/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Verify that all heavy packages were installed and no GPU libraries remain.
# ``mlflow`` is an optional dependency and may be absent in the base image, so
# we report its status without failing the build when it's not installed.
RUN $VIRTUAL_ENV/bin/python - <<'PY'
import importlib

print("Checking package versions...")

required_modules = (
    ("torch", "Torch"),
    ("stable_baselines3", "SB3"),
    ("pytorch_lightning", "Lightning"),
)

for module_name, label in required_modules:
    module = importlib.import_module(module_name)
    version = getattr(module, "__version__", "<unknown>")
    print(f"{label}: {version}")

try:
    mlflow = importlib.import_module("mlflow")
except ModuleNotFoundError:
    print("MLflow: not installed (optional)")
else:
    print(f"MLflow: {getattr(mlflow, '__version__', '<unknown>')}")
PY

RUN if /app/venv/bin/pip freeze | grep -qi nvidia; then \
        echo 'Unexpected NVIDIA packages found' >&2; \
        exit 1; \
    else \
        echo 'No NVIDIA packages installed'; \
    fi

# Use a dedicated non-root user for runtime
RUN groupadd --system bot && useradd --system --gid bot --home-dir /home/bot --shell /bin/bash bot && \
    mkdir -p /home/bot && \
    chown -R bot:bot /app /home/bot

USER bot

CMD ["/app/venv/bin/python", "-m", "bot.trading_bot"]

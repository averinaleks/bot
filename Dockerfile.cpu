# syntax=docker/dockerfile:1

FROM ubuntu:24.04 AS builder
ARG DEBIAN_FRONTEND=noninteractive

# Обновление linux-libc-dev устраняет CVE-2025-21976, а libgcrypt20 — CVE-2024-2236
# Обновляем систему перед установкой зависимостей
RUN set -eux; \
    apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y --no-install-recommends \
        linux-libc-dev \
        libssl3t64 \
        python3.12-minimal \
        build-essential \
        curl \
        python3 python3-venv python3-dev python3-pip \
        zlib1g-dev; \
    apt-get install -y --no-install-recommends --only-upgrade libpam0g libpam-modules; \
    python3 -m pip install --no-cache-dir --break-system-packages \
        'pip>=24.0' \
        'setuptools>=78.1.1,<81' \
        wheel; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*
WORKDIR /app

COPY requirements-core.txt .

ENV VIRTUAL_ENV=/app/venv
RUN python3 -m venv "$VIRTUAL_ENV" && \
    # pip >=24.0 устраняет CVE-2023-32681, setuptools>=78.1.1 закрывает актуальные уязвимости и подходит для сборки gymnasium
    "$VIRTUAL_ENV"/bin/pip install --no-cache-dir 'pip>=24.0' 'setuptools>=78.1.1,<81' wheel && \
    "$VIRTUAL_ENV"/bin/pip install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cpu -r requirements-core.txt && \
    "$VIRTUAL_ENV"/bin/python - <<'PY'
import textwrap

exec(textwrap.dedent("""
    import pathlib
    import urllib.request

    try:
        import ray  # type: ignore
    except Exception:
        print("Ray отсутствует, пропускаем обновление commons-lang3")
    else:
        jars_dir = pathlib.Path(ray.__file__).resolve().parent / "jars"
        jars_dir.mkdir(parents=True, exist_ok=True)
        for jar in jars_dir.glob("commons-lang3-*.jar"):
            jar.unlink()
        urllib.request.urlretrieve(
            "https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.18.0/commons-lang3-3.18.0.jar",
            jars_dir / "commons-lang3-3.18.0.jar",
        )
"""))
PY

RUN set -eu; \
    nvidia_packages="$($VIRTUAL_ENV/bin/pip freeze | grep -i '^nvidia-' || true)"; \
    if [ -n "$nvidia_packages" ]; then \
        printf '%s\n' "$nvidia_packages" | cut -d= -f1 | xargs -r "$VIRTUAL_ENV"/bin/pip uninstall -y; \
    else \
        echo "No NVIDIA packages detected in the virtual environment"; \
    fi; \
    find "$VIRTUAL_ENV" -type d -name '__pycache__' -exec rm -rf {} +; \
    find "$VIRTUAL_ENV" -type f -name '*.pyc' -delete

FROM ubuntu:24.04
ARG DEBIAN_FRONTEND=noninteractive

# Обновляем систему перед установкой зависимостей выполнения
RUN set -eux; \
    apt-get update; \
    # Используем upgrade вместо dist-upgrade, чтобы избежать конфликтов зависимостей
    apt-get upgrade -y; \
    apt-get install -y --no-install-recommends \
        libssl3t64 \
        python3.12-minimal \
        # Библиотека OpenMP требуется бинарям scikit-learn и NumPy.
        libgomp1 \
        curl \
        python3 \
        # Исключаем tar, чтобы избежать CVE-2025-45582
        coreutils libgcrypt20 login passwd; \
    apt-get install -y --no-install-recommends --only-upgrade libpam0g libpam-modules; \
    # ``ensurepip`` отключён в системном Python Ubuntu, а рантайм использует
    # виртуальное окружение из стадии сборки, поэтому дополнительные операции с pip
    # не требуются.
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*; \
    python3 --version

WORKDIR /app

COPY --from=builder /app/venv /app/venv
COPY . .

ENV VIRTUAL_ENV=/app/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Verify that all heavy packages were installed and no GPU libraries remain.
# ``mlflow`` is an optional dependency and may be absent in the base image, so
# we report its status without failing the build when it's not installed.
RUN echo "Checking package versions..." && \
    $VIRTUAL_ENV/bin/python - <<'PY'
import textwrap

exec(textwrap.dedent("""
    import importlib

    required_modules = (
        ("torch", "Torch"),
        ("stable_baselines3", "SB3"),
        ("pytorch_lightning", "Lightning"),
    )

    for module_name, label in required_modules:
        module = importlib.import_module(module_name)
        version = getattr(module, "__version__", "<unknown>")
        print(f"{label}: {version}")

    try:
        mlflow = importlib.import_module("mlflow")
    except ModuleNotFoundError:
        print("MLflow: not installed (optional)")
    else:
        print(f"MLflow: {getattr(mlflow, '__version__', '<unknown>')}")
"""))
PY

RUN if /app/venv/bin/pip freeze | grep -qi nvidia; then \
        echo 'Unexpected NVIDIA packages found' >&2; \
        exit 1; \
    else \
        echo 'No NVIDIA packages installed'; \
    fi

# Use a dedicated non-root user for runtime
RUN groupadd --system bot && useradd --system --gid bot --home-dir /home/bot --shell /bin/bash bot \
    && mkdir -p /home/bot \
    && chown -R bot:bot /app /home/bot

USER bot

CMD ["/app/venv/bin/python", "-m", "bot.trading_bot"]

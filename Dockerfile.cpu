FROM ubuntu:24.04 AS builder
ARG DEBIAN_FRONTEND=noninteractive

# Обновление linux-libc-dev устраняет CVE-2025-21976, а libgcrypt20 — CVE-2024-2236
# Обновляем систему перед установкой зависимостей
RUN apt-get update && apt-get dist-upgrade -y

RUN apt-get install -y --no-install-recommends \
    linux-libc-dev \
    libssl3t64 \
    python3.12-minimal \
    build-essential \
    curl \
    python3 python3-venv python3-dev \
    zlib1g-dev \
    && apt-get install -y --only-upgrade libpam0g libpam-modules \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
WORKDIR /app

COPY requirements-core.txt .

ENV VIRTUAL_ENV=/app/venv
RUN python3 -m venv "$VIRTUAL_ENV" && \
    # pip >=24.0 устраняет CVE-2023-32681, setuptools>=78.1.1 закрывает актуальные уязвимости и подходит для сборки gymnasium
    "$VIRTUAL_ENV/bin/pip" install --no-cache-dir 'pip>=24.0' 'setuptools>=78.1.1,<81' wheel && \
    "$VIRTUAL_ENV/bin/pip" install --no-cache-dir --extra-index-url https://download.pytorch.org/whl/cpu -r requirements-core.txt && \
    "$VIRTUAL_ENV/bin/python" - <<'PY'
import pathlib
import subprocess
import sys
import urllib.request

import ray  # noqa: F401  # ensure dependency is importable


def _download_commons_lang3() -> None:
    jars_dir = pathlib.Path(ray.__file__).resolve().parent / "jars"
    jars_dir.mkdir(parents=True, exist_ok=True)
    for jar in jars_dir.glob("commons-lang3-*.jar"):
        jar.unlink(missing_ok=True)
    target = jars_dir / "commons-lang3-3.18.0.jar"
    urllib.request.urlretrieve(
        "https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.18.0/commons-lang3-3.18.0.jar",
        target,
    )


def _purge_nvidia_packages() -> None:
    freeze = subprocess.run(
        [sys.executable, "-m", "pip", "freeze"],
        check=True,
        capture_output=True,
        text=True,
    ).stdout.splitlines()
    nvidia = [pkg.split("==", 1)[0] for pkg in freeze if pkg.lower().startswith("nvidia-")]
    if nvidia:
        subprocess.run([sys.executable, "-m", "pip", "uninstall", "-y", *nvidia], check=True)
    else:
        print("No NVIDIA packages detected in the virtual environment", flush=True)


if __name__ == "__main__":
    _download_commons_lang3()
    _purge_nvidia_packages()
PY
RUN find "$VIRTUAL_ENV" -type d -name '__pycache__' -exec rm -rf {} + && \
    find "$VIRTUAL_ENV" -type f -name '*.pyc' -delete

FROM ubuntu:24.04
ARG DEBIAN_FRONTEND=noninteractive

# Обновляем систему перед установкой зависимостей выполнения
RUN apt-get update && apt-get dist-upgrade -y

# Установка минимальных пакетов выполнения
RUN apt-get install -y --no-install-recommends \
    libssl3t64 \
    python3.12-minimal \
    curl \
    python3 \
    # Исключаем tar, чтобы избежать CVE-2025-45582
    coreutils libgcrypt20 login passwd \
    && apt-get install -y --only-upgrade libpam0g libpam-modules \
    && apt-get clean && rm -rf /var/lib/apt/lists/* \
    && python3 --version

WORKDIR /app

COPY --from=builder /app/venv /app/venv
COPY . .

ENV VIRTUAL_ENV=/app/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Verify that all heavy packages were installed and no GPU libraries remain
RUN echo "Checking package versions..." && \
    $VIRTUAL_ENV/bin/python -c "import torch; print('Torch:', torch.__version__)" && \
    if /app/venv/bin/pip freeze | grep -qi nvidia; then echo 'Unexpected NVIDIA packages found' >&2; exit 1; else echo 'No NVIDIA packages installed'; fi && \
    $VIRTUAL_ENV/bin/python -c "import stable_baselines3 as sb3, mlflow, pytorch_lightning as pl; print('SB3:', sb3.__version__, 'MLflow:', mlflow.__version__, 'Lightning:', pl.__version__)"

CMD ["/app/venv/bin/python", "-m", "bot.trading_bot"]

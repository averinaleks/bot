# syntax=docker/dockerfile:1.7-labs

# Используем официальный python:3.12-slim и отказываемся от сложной
# двухстадийной сборки на базе Ubuntu. Это устраняет периодические падения
# docker buildx на шаге docker-publish, связанные с ``apt upgrade`` и
# зависимостями Ubuntu, и минимизирует число внешних точек отказа. Теперь мы
# работаем с минимальной средой, поставляемой самим образом Python.
FROM --platform=linux/amd64 python:3.12-slim AS base

ENV PYTHONUNBUFFERED=1

ARG DEBIAN_FRONTEND=noninteractive

RUN <<'EOSHELL'
set -euxo pipefail
apt-get update
apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    git \
    patch
rm -rf /var/lib/apt/lists/*
EOSHELL

WORKDIR /app

# Устанавливаем изолированное виртуальное окружение, заранее подтягивая
# обновлённые версии pip/setuptools, необходимые для прохождения Trivy.
RUN <<'EOSHELL'
set -euxo pipefail
python -m venv /venv
/venv/bin/python -m ensurepip --upgrade
/venv/bin/pip install --no-cache-dir \
    'pip>=24.0' \
    'setuptools>=80.9.0,<81' \
    wheel
/venv/bin/pip cache purge
rm -rf /root/.cache/pip
EOSHELL

# Copy files required for static analysis
COPY .pre-commit-config.yaml .flake8 .pylintrc requirements-core.txt requirements-gpu.txt ./
COPY *.py ./
COPY scripts scripts
COPY services services
COPY tests tests

ENV PATH="/venv/bin:$PATH"

# Выделенный системный пользователь внутри контейнера
RUN groupadd --system bot \
    && useradd --system --gid bot --home-dir /home/bot --shell /bin/bash bot \
    && mkdir -p /home/bot \
    && chown -R bot:bot /app /home/bot /venv

USER bot

CMD ["bash"]


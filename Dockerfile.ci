# syntax=docker/dockerfile:1

# -------- Builder stage --------
# Используем публичный LTS-образ Ubuntu для сборки зависимостей
FROM --platform=linux/amd64 ubuntu:24.04@sha256:78281ac7684a7caf02348780a1b5de85844548a3cc0505df924de98380a0eeea AS builder

ARG DEBIAN_FRONTEND=noninteractive

# Обновление linux-libc-dev устраняет CVE-2025-21976, а libgcrypt20 — CVE-2024-2236.
# Дополнительно выполняем upgrade, чтобы подтянуть свежие патчи безопасности из Ubuntu.
# После создания виртуального окружения обновляем pip и setuptools до версий,
# закрывающих CVE-2024-6345 и CVE-2025-47273, иначе Trivy обнаруживает
# уязвимые копии setuptools внутри образа.
RUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \
    python3 python3-venv build-essential linux-libc-dev libgcrypt20 git patch \
    ca-certificates \
    && apt-get install -y --no-install-recommends gnupg dirmngr \
    && python3 -m venv /venv \
    && /venv/bin/python -m ensurepip --upgrade \
    && /venv/bin/pip install --no-cache-dir \
        'pip>=24.0' \
        'setuptools>=80.9.0,<81' \
        wheel \
    && /venv/bin/pip cache purge \
    && rm -rf /root/.cache/pip \
    && apt-get purge -y --auto-remove build-essential \
    && apt-get clean && rm -rf /var/lib/apt/lists/* \
    && ldconfig \
    && gpg --version \
    && dirmngr --version

WORKDIR /app


# Copy files required for static analysis
COPY .pre-commit-config.yaml .flake8 .pylintrc requirements-core.txt requirements-gpu.txt ./
COPY *.py ./
COPY scripts scripts
COPY services services
COPY tests tests

# -------- Runtime stage --------
FROM --platform=linux/amd64 ubuntu:24.04@sha256:78281ac7684a7caf02348780a1b5de85844548a3cc0505df924de98380a0eeea AS runtime

ARG DEBIAN_FRONTEND=noninteractive

# Устанавливаем только необходимые пакеты выполнения и сразу обновляем базовую систему
RUN apt-get update && apt-get upgrade -y && apt-get install --no-install-recommends -y \
    libssl3t64 \
    python3.12-minimal \
    openssl \
    libpam0g \
    ca-certificates \
    && if dpkg-query --show --showformat='${Status}' git 2>/dev/null | grep -q '^install ok installed$'; then \
        apt-get purge -y git && apt-get autoremove -y; \
    else \
        echo 'git is not installed in the runtime stage, skipping purge'; \
    fi \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Копируем только нужные артефакты из builder
COPY --from=builder /venv /venv
COPY --from=builder /app /app

ENV PATH="/venv/bin:$PATH"

# Run as a dedicated non-root user inside the CI container
RUN groupadd --system bot && useradd --system --gid bot --home-dir /home/bot --shell /bin/bash bot \
    && mkdir -p /home/bot \
    && chown -R bot:bot /app /home/bot /venv

USER bot

CMD ["bash"]

